// tslint:disable: no-magic-numbers
import {ColumnBuilder} from '../column'
import {ColumnBlockBuilder} from '../column_block'
import {TableBuilder} from '../table'

import {mergeTableHeader} from './merge'

// tslint:disable-next-line: max-func-body-length
describe('combine header', (): void => {
    it('only date cols', (): void => {
        const c11 = new ColumnBuilder().name('2015').build()
        const c12 = new ColumnBuilder().name('2016').build()
        const t1 = new TableBuilder().name('t1').subnodes([c11, c12]).build()
        const c21 = new ColumnBuilder().name('2016').build()
        const c22 = new ColumnBuilder().name('2017').build()
        const t2 = new TableBuilder().name('t2').subnodes([c21, c22]).build()
        const header = mergeTableHeader([t1, t2])
        expect(header.unionCols.length).toBe(3)
        expect(header.unionCols[0].name).toBe('2015')
        expect(header.getOriginalCols(header.unionCols[0].uuid))
            .toEqual([c11.uuid])
        expect(header.toUnionCol.get(c11.uuid)).toBe(header.unionCols[0])
        expect(header.unionCols[1].name).toBe('2016')
        expect(header.getOriginalCols(header.unionCols[1].uuid))
            .toEqual([c12.uuid, c21.uuid])
        expect(header.toUnionCol.get(c12.uuid)).toBe(header.unionCols[1])
        expect(header.toUnionCol.get(c21.uuid)).toBe(header.unionCols[1])
        expect(header.unionCols[2].name).toBe('2017')
        expect(header.getOriginalCols(header.unionCols[2].uuid))
            .toEqual([c22.uuid])
        expect(header.toUnionCol.get(c22.uuid)).toBe(header.unionCols[2])
    })
    it('date and other cols', (): void => {
        const c11 = new ColumnBuilder().name('2015').build()
        const c12 = new ColumnBuilder().name('common').build()
        const t1 = new TableBuilder().name('t1').subnodes([c11, c12]).build()
        const c21 = new ColumnBuilder().name('common').build()
        const c22 = new ColumnBuilder().name('special').build()
        const t2 = new TableBuilder().name('t2').subnodes([c21, c22]).build()
        const header = mergeTableHeader([t1, t2])
        expect(header.unionCols.length).toBe(3)
        expect(header.unionCols[0].name).toBe('2015')
        expect(header.getOriginalCols(header.unionCols[0].uuid))
            .toEqual([c11.uuid])
        expect(header.toUnionCol.get(c11.uuid)).toBe(header.unionCols[0])
        expect(header.unionCols[1].name).toBe('common')
        expect(header.getOriginalCols(header.unionCols[1].uuid))
            .toEqual([c12.uuid, c21.uuid])
        expect(header.toUnionCol.get(c12.uuid)).toBe(header.unionCols[1])
        expect(header.toUnionCol.get(c21.uuid)).toBe(header.unionCols[1])
        expect(header.unionCols[2].name).toBe('special')
        expect(header.getOriginalCols(header.unionCols[2].uuid))
            .toEqual([c22.uuid])
        expect(header.toUnionCol.get(c22.uuid)).toBe(header.unionCols[2])
    })
    it('date cols and col block', (): void => {
        const c11 = new ColumnBuilder().name('2015Q1').build()
        const c12 = new ColumnBuilder().name('2015Q2').build()
        const c13 = new ColumnBuilder().name('2015').build()
        const t1 = new TableBuilder()
            .name('t1')
            .subnodes([c11, c12, c13])
            .build()
        const c21 = new ColumnBuilder().name('Q1').build()
        const c22 = new ColumnBuilder().name('Q2').build()
        const cb = new ColumnBlockBuilder()
            .name('2015')
            .tree([c21, c22])
            .build()
        const t2 = new TableBuilder().name('t2').subnodes([cb]).build()
        const header = mergeTableHeader([t1, t2])
        expect(header.unionCols.length).toBe(3)
        expect(header.unionCols[0].name).toBe('2015')
        expect(header.getOriginalCols(header.unionCols[0].uuid))
            .toEqual([c13.uuid])
        expect(header.toUnionCol.get(c13.uuid)).toBe(header.unionCols[0])
        expect(header.unionCols[1].name).toBe('2015Q1')
        expect(header.getOriginalCols(header.unionCols[1].uuid))
            .toEqual([c11.uuid, c21.uuid])
        expect(header.toUnionCol.get(c11.uuid)).toBe(header.unionCols[1])
        expect(header.toUnionCol.get(c21.uuid)).toBe(header.unionCols[1])
        expect(header.unionCols[2].name).toBe('2015Q2')
        expect(header.getOriginalCols(header.unionCols[2].uuid))
            .toEqual([c12.uuid, c22.uuid])
        expect(header.toUnionCol.get(c12.uuid)).toBe(header.unionCols[2])
        expect(header.toUnionCol.get(c22.uuid)).toBe(header.unionCols[2])
    })
})
